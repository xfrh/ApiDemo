@using ApiDemoApp.Pages
@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using ApiDemoApp.Events;
@inject AppState appState
@implements IDisposable
@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authState 

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
 
    <MudAppBar Elevation="1" Color="Color.Transparent">

           <MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0" >
           <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" Disabled="@notLogin" />
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Navigation" IconColor="Color.Inherit" Size="Size.Small" OnClick="@ToggleRightDrawer" Disabled="@notLogin">坐标导航</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.MoveUp" IconColor="Color.Inherit" Size="Size.Small" OnClick="@ToggleRightDrawer2" Disabled="@notLogin">移动小车</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.TaskAlt" IconColor="Color.Inherit" Size="Size.Small" Disabled="@notLogin" OnClick="@TaskManager">任务管理</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Map" IconColor="Color.Inherit" Size="Size.Small" Disabled="@notLogin" OnClick="@MapManager">地图管理</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.VerifiedUser" IconColor="Color.Inherit" Size="Size.Small" Disabled="@notLogin" OnClick="@UserManager">用户管理</MudButton>
            <AGVStatus />
            </MudPaper>
         
        @if (notLogin)
        {
            <MudTooltip Text="登录">
                <MudIconButton Icon="@Icons.Filled.Login" Color="Color.Primary" Edge="Edge.End" aria-label="登录" Href="/login" />
            </MudTooltip>
        }
        else
        {
            <MudAvatar Color="Color.Warning" Variant="Variant.Filled">
                <MudTooltip Text="@login_user.EmailAddress">
                    <MudIcon Color="Color.Dark" Icon="@Icons.Filled.Person" Size="Size.Medium" />
                </MudTooltip>
            </MudAvatar>
            <MudTooltip Text="退出登录">
                <MudIconButton Icon="@Icons.Filled.Logout" Color="Color.Primary" Edge="Edge.End" aria-label="退出" Href="/logout" />
            </MudTooltip>
        }



    </MudAppBar>
  
 
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Variant="@DrawerVariant.Persistent" Width="380px">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Class="mt-1">AGV 列表</MudText>
        </MudDrawerHeader>
        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Href="/addagv"/>
       <AGVList/>
    </MudDrawer>
   
    <MudDrawer @bind-Open="@openRight" Fixed="false" Anchor="Anchor.Right" Elevation="2" Variant="@DrawerVariant.Temporary" Height="850px" Width="@drawerWidth">
           
            @if(targetPoint_Nav){
                 <MudDrawerHeader>
                <MudText Typo="Typo.h6">目标点导航</MudText>
                </MudDrawerHeader>
                 <TargetPoints />
            }
            else{
                  <MudDrawerHeader>
                  <MudText Typo="Typo.h6">移动小车</MudText>
                  </MudDrawerHeader>
                   <MoveAction />
            }
               
        </MudDrawer>
     
    <MudMainContent>
        <ErrorBoundary>
            <ChildContent>
                    @Body
            </ChildContent>
            <ErrorContent>
                <MudText Typo="Typo.h6">Whoa, sorry about that! While we fix this problem, buy some shirts!</MudText>
            </ErrorContent>
         </ErrorBoundary>
      </MudMainContent>
</MudLayout>
@code {
    [Inject] private IDialogService DialogService { get; set; }
    bool _drawerOpen = false;
    bool openRight = false;
    bool notLogin = true;
    bool targetPoint_Nav = true;
    bool isNormal = true;
    string drawerWidth;
    RegisterAGVFrom model;
    User login_user;
    List<AGVTaskModel> lst;
    List<AGVProperties> lst_properties;
    protected override void OnInitialized()
    {
        model = appState.SelectedModel;
        appState.OnChange += ReceivedModel;
        EventBase.navigateTrigger += RegisterNavTrigger;
    }



    async void RegisterNavTrigger(object sender, EventArgs m){
        if(isNormal){
            List<RegisterAGVFrom> agv_lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
            AGVTaskModel avt = (AGVTaskModel)m;
            var p = agv_lst.FirstOrDefault(v => v.name == avt.AGV_No);
            if (p != null)
            {
                if(NavTaskService.routes.ContainsKey(p.name)) return;

                if(appState.SelectedModel!=p){
                    appState.SelectedModel = p;
                    appState.SetModel(p, ActionType.SELECTED);
                }
                appState.SelectedModel = p;
                appState.SelectedModel.DrawCoordinates = new List<Coordinace>();
                appState.SelectedModel.cur_target = "";
                HttpService.Base_URL = p.url;
                NavTaskService.routes.TryAdd(avt.AGV_No, avt.routes);
                if (!HttpService.myIps.ContainsKey(avt.AGV_No))
                    HttpService.myIps.TryAdd(avt.AGV_No, avt.url);
                appState.SetModel(appState.SelectedModel, ActionType.NAVIGATE);

                _navigationManager.NavigateTo("/map");
            }


        }
    }

    private async Task InitJob()
    {
        try
        {
            lst_properties = await localStorage.GetItemAsync<List<AGVProperties>>("target_properties");
            lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
            var agv_lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
            if (agv_lst != null && lst != null && lst.Count > 0)
            {
                if (appState.SelectedModel == null)
                {
                    foreach (var model in lst)
                    {
                        await TimeJobService.AddToSchedule(model);
                    }
                }
            }

        }
        catch (Exception ex)
        {

            LogService.LogMessage("initjob at mainlayout " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            login_user = await localStorage.GetItemAsync<User>("login_user");
            if (login_user != null)
            {
                var en = Enum.Parse<TestUserType>(login_user.Role);
                var authState = await ((TestAuthenticationStateProvider)_authState).ChangeUser(en);
                await InitJob();
            }
            var authenticationState = await _authState.GetAuthenticationStateAsync();
            if(authenticationState.User!=null && authenticationState.User.Identity.IsAuthenticated)
            {
                notLogin =false;
                StateHasChanged();
            }

         
        }

    }

    public void Dispose()
    {
        appState.OnChange -= ReceivedModel;
        EventBase.navigateTrigger -= RegisterNavTrigger;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    void CancelNav()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        appState.SetModel(model, ActionType.CANCEL);
        StateHasChanged();


    }

    void NavCharge()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        appState.SetModel(model,ActionType.COMPLETE);
        ToggleRightDrawer();
        StateHasChanged();
    }


    void UserManager()
    {
        if (!isNormal) return;
        // appState.SelectedModel = null;
        _navigationManager.NavigateTo("/usermanager",false);
    }

    void MapManager()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        _navigationManager.NavigateTo("/mapmanager", false);
    }

    void TaskManager()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        _navigationManager.NavigateTo("/taskmanager");
    }

    public void ReceivedModel()
    {
        if (appState.SelectedModel != null)
        {
            model=appState.SelectedModel;
            if(appState.SelectedType == ActionType.SELECTED)
            {
                if(isNormal==false){
                    isNormal = true;
                    _navigationManager.NavigateTo("/map");
                    StateHasChanged();

                }
              
            }
            if(appState.SelectedType==ActionType.WATCHLIST){

                isNormal = false;
                _navigationManager.NavigateTo("/scheduler");
                StateHasChanged();

           }

        }


    }
    void ToggleRightDrawer()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        targetPoint_Nav = true;
        drawerWidth = "450px";
        openRight = !openRight;
    }

    void ToggleRightDrawer2()
    {
        if (appState.SelectedModel == null) return;
        if (!isNormal) return;
        appState.SelectedModel.DrawCoordinates.Clear();
        targetPoint_Nav = false;
        drawerWidth = "300px";
        openRight = !openRight;
    }
    
}

