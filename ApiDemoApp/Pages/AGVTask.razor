@page "/taskmanager"
@attribute [Authorize(Roles="Admin")]
@using System.ComponentModel.DataAnnotations
@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using System
@using System.Text
@using System.Reflection
@using Quartz
@using Quartz.Impl
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ApiDemoApp.Services.AppState appState

<MudGrid Class="pa-4 mt-16"  >
    <MudItem xs="12" sm="5"  >
        <EditForm Model="@model"  OnValidSubmit="OnValidSubmit" Context="FormContext" >
            <DataAnnotationsValidator />
            <MudCard Outlined="true" >
                <MudCardContent class="d-flex  flex-grow-1 gap-4">
                    <MudItem xs="12" sm="6" md="6">
                        <MudField Label="任务标题" Variant="Variant.Outlined">
                         <MudTextField  Class="mt-3" @bind-Value="model.Title" For="@(() => model.Title)" />

                        </MudField>
                    </MudItem>
                       <MudItem xs="12" sm="6" md="6">
                        <MudField Label="开始时间" Variant="Variant.Outlined" >
                            <MudTimePicker @bind-Time="time" />
                        </MudField>
                    </MudItem>
                     </MudCardContent>
                   </MudCard>
           
            <MudCard>
                <MudCardContent>
                         <MudItem xs="12">
                   
                        <MudTable Items="@lst_properties" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" Height="265px" FixedHeader="true" Filter="new Func<AGVProperties, bool>(Search)" Striped=true Dense=true >
                            <ToolBarContent>
                        <MudText Typo="Typo.inherit">设置目标点属性</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="搜索目标..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                       </ToolBarContent>
                            
                            <HeaderContent>
                            <MudTh>目标名称</MudTh>
                            <MudTh>到达后断电</MudTh>
                            <MudTh>离开后上电</MudTh>
                            <MudTh>停留时长(秒)</MudTh>
                         </HeaderContent>
                           <RowTemplate  >
                                <MudTd DataLabel="目标名称">@context.Targetname</MudTd>
                                 <MudTd DataLabel="到达后断电" ><MudCheckBox @bind-Checked="@context.isUnlockOnArrial" Label="断电"></MudCheckBox></MudTd>
                                <MudTd DataLabel="离开后上电"><MudCheckBox @bind-Checked="@context.isLockedOnLeave" Label="上电"></MudCheckBox></MudTd>
                                <MudTd DataLabel="停留时长" ><MudTextField @bind-Value="@context.StayTime" Variant="Variant.Text" HelperText="停留时长" HelperTextOnFocus="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Timer"></MudTextField></MudTd>
                             </RowTemplate>
                        </MudTable>
                    </MudItem>
                   
                </MudCardContent>
            </MudCard>
             <MudCard>
                <MudCardContent class="d-flex  flex-grow-1 gap-4">
                  

                    <MudItem xs="12" sm="6" md="6" >
                        <MudField Label="执行模式" Variant="Variant.Outlined" InnerPadding="false">
                            <MudRadioGroup @bind-SelectedOption="model.CycleStyle">
                                <MudRadio Option="false" Color="Color.Primary" Dense="true" >单次循环</MudRadio>
                                <MudRadio Option="true" Color="Color.Secondary" Dense="false">时长循环</MudRadio>
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>

                     <MudItem xs="12" sm="6" md="6" >
                        <MudField Label="任务完成后" Variant="Variant.Outlined" InnerPadding="false">
                            <MudRadioGroup @bind-SelectedOption="model.AfterTask" >
                                <MudRadio Option="false" Dense="true" >返回开始点</MudRadio>
                                <MudRadio Option="true" Dense="false">去充电</MudRadio>
                            </MudRadioGroup>
                        </MudField>
                    </MudItem>
                </MudCardContent>
            </MudCard>

            <MudCard>
                <MudCardContent class="d-flex  flex-grow-1 gap-4">
                    <MudItem xs="12" sm="6" md="6">
                     
                           <MudSelect T="string" Label="重复" MultiSelection="true" @bind-Value="week_value" @bind-SelectedValues="model.WeekOptions">
                            @foreach (var wkday in wkDays)
                            {
                                <MudSelectItem T="string" Value="@wkday">@wkday</MudSelectItem>
                            }
                        </MudSelect>
                         <ValidationMessage For="@(() => model.WeekOptions)" />
                    </MudItem>
                   <MudItem xs="12" sm="6" md="6">
                     
                            <MudSelect Label="目标点执行顺序" MultiSelection="true" @bind-Value="target_value" @bind-SelectedValues="model.TargetOptions">
                            @foreach (var target in targets)
                            {
                                <MudSelectItem Value="@target">@target</MudSelectItem>
                            }
                        </MudSelect>
                         <ValidationMessage For="@(() => model.TargetOptions)" />
                    </MudItem>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">注册</MudButton>
                </MudCardActions>
            </MudCard>
           
        </EditForm>
    </MudItem>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4 mud-height-full">
            <MudTable Items="@lst" @ref="mudTable" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" OnRowClick="RowClick" T="AGVTaskModel">
                <HeaderContent>
                    <MudTh>机器人编号</MudTh>
                    <MudTh>任务标题</MudTh>
                    <MudTh>执行模式</MudTh>
                    <MudTh>开始时间</MudTh>
                   <MudTh>任务完成后</MudTh> 
                   <MudTh>目标点</MudTh> 
                    <MudTh>重复</MudTh> 
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="机器人编号">@context.AGV_No</MudTd>
                    <MudTd DataLabel="任务标题">@context.Title</MudTd>
                    <MudTd DataLabel="执行模式">@(context.CycleStyle==false?"单次循环":"时长循环")</MudTd>
                    <MudTd DataLabel="开始时间">@context.StartTime</MudTd>
                    <MudTd DataLabel="任务完成后">@(context.AfterTask==true?"去充电":"返回开始点")</MudTd>
                    <MudTd DataLabel="目标点">@context.TargetName</MudTd>
                    <MudTd DataLabel="重复">@(string.Join(",", context.WeekOptions.ToArray()))</MudTd>

                </RowTemplate>
            </MudTable>
                <MudSwitch T="bool" Label="开启监控" Color="Color.Info" Disabled="_isMonitor" CheckedChanged="ClickHandler" />
               
        </MudPaper>
       
    </MudItem>

</MudGrid>



    @code {

    [Inject] private IDialogService DialogService { get; set; }

    AGVTaskModel model = new AGVTaskModel();
    List<AGVTaskModel> lst = new List<AGVTaskModel>();
    List<string> targets = new List<string>();
    private List<AGVProperties> lst_properties = new List<AGVProperties>();
    private bool _loading;
    private bool _isMonitor;
    AGVTaskModel _selectedItem;
    bool success;
    private MudTable<AGVTaskModel> mudTable;
    private string searchString = "";
    TimeSpan? time = new TimeSpan(00, 00, 00);
    string schedulModel = "0 0 12 ? *";
    private string week_value { get; set; } = "Nothing selected";
    private string target_value { get; set; } = "Nothing selected";
    private Coordinace start_point;
    private string[] wkDays =
    {
        "周一", "周二", "周三", "周四",
        "周五", "周六", "周日", 
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            targets.Clear();
            start_point = await HttpService.Execute_Get("pose");
            lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
            //   lst_properties = await localStorage.GetItemAsync<List<AGVProperties>>("target_properties");
            lst_properties = new List<AGVProperties>();
            List<TargetPointsModel> pp = await HttpService.Execute_Get("android_target");
            foreach (var p in pp){
                targets.Add(p.name);
                lst_properties.Add(new AGVProperties()
                {
                    Targetname=p.name,
                    isLockedOnLeave=false,
                    isUnlockOnArrial=false,
                    StayTime=0
                });
            }

            if (lst == null)
                lst = new List<AGVTaskModel>();
            _isMonitor = lst.Count == 0;
            foreach (var model in lst)
                TimeJobService.EditShowList(model);


            StateHasChanged();
        }

    }


    private async void OnValidSubmit(EditContext context)
    {
        if(string.IsNullOrEmpty(model.Title)){
            await DialogService.ShowMessageBox(
                 "警告",
                 "标题不可以为空!",
                 yesText: "OK");
            return;
        }

        var q = lst.FirstOrDefault(v=>v.Title== model.Title);
        if(q!=null) {
            await DialogService.ShowMessageBox(
                "警告",
                "标题不可以重复!",
                yesText: "OK");
            return;
        };

        if(model.WeekOptions.Count()==0) {
            await DialogService.ShowMessageBox(
                "警告",
                "还没有选择重复模式!",
                yesText: "OK");
            return;
        }

        if (model.TargetOptions.Count() == 0){
            await DialogService.ShowMessageBox(
              "警告",
              "还没有选择目标点!",
              yesText: "OK");
            return;

        }

        string temp = "";
        model.AGV_No = appState.SelectedModel.name;
        model.Mark = appState.SelectedModel.Mark;
        model.StartTime = time;
        model.TargetName="";
        model.properties = new List<AGVProperties>();
        foreach(var item in model.TargetOptions){
            temp += item + ",";
            AGVProperties p = lst_properties.FirstOrDefault(v => v.Targetname == item);
            if (p != null)
                model.properties.Add(p);
        }
        model.url = appState.SelectedModel.url;
        model.TargetName = temp.TrimEnd(',');
        if (model.AfterTask){
            model.properties.Add(new AGVProperties()
            {
                isLockedOnLeave=true,
                isUnlockOnArrial=true,
                StayTime=0,
                Targetname="充电桩"

            });
        }
        else
        {
            Coordinace coordinace = await HttpService.Execute_Get("pose");
            if(coordinace!=null){
                model.properties.Add(new AGVProperties()
                    {
                        isLockedOnLeave = true,
                        isUnlockOnArrial = true,
                        StayTime = 0,
                        Targetname = JsonSerializer.Serialize(coordinace)
                     }
                );
            }
        }
        model.routes = new Queue<AGVProperties>();
        foreach (var item in model.properties)
        model.routes.Enqueue(item);

        TimeJobService.EditShowList(model);
        lst.Add(model);
        await localStorage.SetItemAsync<List<AGVTaskModel>>("agv_task", lst);
        _isMonitor = false;
        appState.SetModel(appState.SelectedModel, ActionType.ADDTASK);
        
        await TimeJobService.AddToSchedule(model);
        await this.InvokeAsync(() => this.StateHasChanged());
        model = new AGVTaskModel();

    }
    void ClickHandler(bool value)
    {
        if (value)
            appState.SetModel(appState.SelectedModel, ActionType.WATCHLIST);
    }
  
    private bool Search(AGVProperties map)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (map.Targetname==searchString)
        {
            return true;
        }
        return false;
    }

    private async void RowClick(TableRowClickEventArgs<AGVTaskModel> tableRowClickEventArgs)
    {
        try
        {
            AGVTaskModel aGVTaskModel = tableRowClickEventArgs.Item;
            bool? result = await DialogService.ShowMessageBox(
               "警告",
               "确实要删除该任务吗!",
               yesText: "Delete!", cancelText: "Cancel");
            if (result != null)
            {
                var q = lst.FirstOrDefault(v => v.Title == aGVTaskModel.Title && v.AGV_No == aGVTaskModel.AGV_No);
                if (q != null)
                {
                    lst.Remove(q);
                    if (lst.Count == 0){
                        await localStorage.RemoveItemAsync("agv_task");
                        _isMonitor = true;
                    }
                   else
                        await localStorage.SetItemAsync<List<AGVTaskModel>>("agv_task", lst);

                    await TimeJobService.DeleteSchedule(q.Title);
                    appState.SetModel(appState.SelectedModel, ActionType.ADDTASK);
                    StateHasChanged();
                }

            }

        }
        catch (Exception ex)
        {
            
            LogService.LogMessage("AGVTask RowCLick " + ex.Message);
        }
      
    }


  
 
}