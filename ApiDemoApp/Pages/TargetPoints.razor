@page "/points"
@using ApiDemoApp.Models
@using System.Text.Json
@using ApiDemoApp.Services
@using System.Text
@using System.Reflection
@inject AppState appState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ISnackbar Snackbar
@implements IDisposable;


<MudTable Elevation="25" Items="@lst" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="导航顺序" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Route" IconSize="Size.Medium" Class="mt-0" ReadOnly="true"></MudTextField>
    </ToolBarContent>
    <HeaderContent > 
        <MudTh><MudCheckBox Label="全选" @bind-Checked="@All_Checked" @onclick="ToggleSelectAll" Disabled="@isAllChecked" /></MudTh>     
      @*  <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.VerifiedUser" IconColor="Color.Inherit" Size="Size.Small" OnClick="@TestNext">test next</MudButton>*@
        <MudTh ><MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.ElectricalServices" IconColor="Color.Inherit" Size="Size.Small" @onclick="NavCharge" Disabled="@isCharge">充电</MudButton></MudTh>
        <MudTh><MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Navigation" IconColor="Color.Inherit" Size="Size.Small" @onclick="StartNav" Disabled="@isNaved">导航</MudButton></MudTh>
        <MudTh><MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.CancelScheduleSend" IconColor="Color.Inherit" Size="Size.Small" @onclick="CancelNav" Disabled="@isCancelled">取消</MudButton></MudTh>
      
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudCheckBox @bind-Checked="@context.isChecked" @onclick="@(()=>Edit(@context.name))" Disabled="@context.isCheckable">@context.name</MudCheckBox></MudTd>
        <MudTd DataLabel="坐标">x: @string.Format("{0:N2}", @context.coordinace.x) <br /> y:  @string.Format("{0:N2}", @context.coordinace.y)<br/> theta: @string.Format("{0:N2}", @context.coordinace.theta)</MudTd>
           <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Resume(@context.name))" Color="Color.Primary" Icon="@Icons.Filled.NotStarted" Size="Size.Small" IconSize="Size.Small" Title="开始"  Disabled="context.isStarted"/>
         </MudTd>
        <MudTd>
            <MudFab @onclick="@(()=>Pause(@context.name))" Color="Color.Primary" Icon="@Icons.Filled.PauseCircleFilled" Size="Size.Small" IconSize="Size.Small" Title="暂停" Disabled="context.isPaused" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private List<TargetPointsModel> lst = new List<TargetPointsModel>();
    private List<AGVProperties> lst_properties = new List<AGVProperties>();
    public static TargetPointsModel target = new TargetPointsModel();
    private string searchString = "";
    private string coordinateString = "";
    private string cur_target = "";
    bool isCancelled;
    bool isNaved;
    bool isCharge;
    bool isAllChecked;
    public bool All_Checked { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            if (appState.SelectedModel != null)
            {
                lst = await HttpService.Execute_Get("android_target");

            }
            InitUiComponets();
            appState.OnChange += ReceiveData;
            lst_properties = await localStorage.GetItemAsync<List<AGVProperties>>("target_properties");
        }

    }
    async void TestNext(){
        await HttpService.Execute_Post("next", null);
    }
    public async void ReceiveData()
    {
        try
        {
            if (appState.SelectedModel != null)
            {
                if (appState.SelectedType == ActionType.SELECTED)
                {
                    lst = await HttpService.Execute_Get("android_target");
                    appState.SelectedModel.cur_target = "";
                    appState.SelectedModel.PropertyChanged += (s, e) =>
                    {
                        cur_target=e.PropertyName;
                        InitUpdtedUiComponets();
                    };
                    InitUiComponets();
                }
                if (appState.SelectedType == ActionType.COMPLETE)
                {
                    InitUiComponets();

                }


            }
        }
        catch (Exception ex)
        {

            LogService.LogMessage("targetpoints" + ex.Message);
        }

    }
    public void Dispose()
    {
        appState.OnChange -= ReceiveData;
    }


    void ToggleSelectAll()
    {
        if(lst!=null){
            string temp = "";

            foreach (var item in lst)
            {
                item.isChecked = !All_Checked;
                temp += item.name + " ";
            }
            searchString = !All_Checked ? temp : "";
            StateHasChanged();
        }

    }

    async void InitUiComponets(){


        searchString = "";
        isAllChecked = false;
        All_Checked = false;
        isNaved = false;
        isCharge = false;
        isCancelled = true;
        if(lst!=null){
            foreach (var item in lst)
            {
                item.isCheckable = false;
                item.isChecked = false;
                item.isPaused = true;
                item.isStarted = true;
            }
        }

        await InvokeAsync(StateHasChanged);
    }


    async void InitUpdtedUiComponets(){
        try
        {
            if(NavTaskService.routes.ContainsKey(appState.SelectedModel.name)){
                Queue<AGVProperties> online_targets = NavTaskService.routes[appState.SelectedModel.name];
                if (online_targets.Count > 0)
                {
                    isAllChecked = true;
                    isNaved = true;
                    isCharge = true;
                    isCancelled = false;
                    searchString ="";
                    foreach (var item in lst)
                    {
                        item.isCheckable = true;
                        item.isChecked = online_targets.FirstOrDefault(v=>v.Targetname==item.name)!=null || item.name == cur_target;
                        item.isStarted = true;
                        item.isPaused = item.name ==cur_target ? false : true;
                    }
                    List<AGVProperties> mms = online_targets.ToList();
                    foreach (var item in mms)
                    {
                       if(!item.Targetname.Contains("x"))
                         searchString += item.Targetname + " ";
                    }

                    searchString = searchString.Trim();
                    await InvokeAsync(StateHasChanged);
                }
            }

        }
        catch (Exception ex)
        {

            LogService.LogMessage("InitUpdtedUiComponets" + ex.Message);
        }

    }

    async void  ToggleSelected(bool toggleall=true){

        foreach(var item in lst){
            if (item.isChecked && item.name.Trim() == cur_target)
            {
                item.isPaused = !item.isPaused;
            }
            else
                item.isPaused = true;

            item.isCheckable = !item.isCheckable;
        }
        if(toggleall){
            isCharge = !isCharge;
            isNaved = !isNaved;
            isCancelled = !isCancelled;
            isAllChecked = !isAllChecked;

        }

        await InvokeAsync(StateHasChanged); 
    }

    async void RemoveChecked(){
        foreach (var item in lst)
        {
            if (item.isChecked)
                item.isChecked = false;
        }
        await InvokeAsync(StateHasChanged);
    }


    private void Edit(string name)
    {
        target = lst.FirstOrDefault(c => c.name == name);
        List<string> targets = searchString.Split(" ").ToList();
        var q = targets.FirstOrDefault(v => v == name);
        if(q!=null)
        {
            targets.Remove(q);
            searchString = String.Join(" ", targets.ToArray());
        }

        else
            searchString += target.name + " ";


    }




    public async Task Resume(string name)
    {
        var  target = lst.FirstOrDefault(c => c.name.Trim() == name.Trim());
        if(target!=null){
            appState.SetModel(appState.SelectedModel, ActionType.RESUME);
            target.isStarted = true;
            target.isPaused = false;
            StateHasChanged();
        }

    }

    public async Task NavCharge()
    {
        InitQue();
        isAllChecked = true;
        isNaved = true;
        isCharge = true;
        isCancelled = false;
        foreach (var item in lst)
        {
            item.isCheckable=true;
            item.isChecked = false;
            item.isStarted=true;
            item.isPaused = true;
            if (item.name == "充电桩"){
                item.isChecked = true;
                item.isStarted = true;
                item.isPaused = false;
            }

        }

        StateHasChanged();
        Queue<AGVProperties> temp_que = new Queue<AGVProperties>();
        temp_que.Enqueue(new AGVProperties(){
            isLockedOnLeave=true,
            isUnlockOnArrial=true,
            StayTime=0,
            Targetname="充电桩"
        });
        NavTaskService.routes.TryAdd(appState.SelectedModel.name, temp_que);
        appState.SetModel(appState.SelectedModel, ActionType.CHARGE);
    }

    public async void Pause(string name)
    {
        if (appState.SelectedModel == null) return;

        target = lst.FirstOrDefault(c => c.name.Trim() == name.Trim());
        if (target != null)
        {
            if (target.isChecked)
            {
                appState.SetModel(appState.SelectedModel, ActionType.PAUSE);
                target.isStarted = false;
                target.isPaused = true;
                StateHasChanged();
            }
        }
    }

    void InitQue(){


        if (NavTaskService.routes != null)
        {
            if (NavTaskService.routes.ContainsKey(appState.SelectedModel.name))
                NavTaskService.routes.Remove(appState.SelectedModel.name);
        }
        if (!HttpService.myIps.ContainsKey(appState.SelectedModel.name))
            HttpService.myIps.TryAdd(appState.SelectedModel.name, appState.SelectedModel.url);
        appState.SelectedModel.DrawCoordinates.Clear();
    }

    public async Task StartNav()
    {
        try
        {
            if (string.IsNullOrEmpty(searchString)) return;
            InitQue();
            string[] targets = searchString.Split(" ");
            Queue<AGVProperties> temp_que = new Queue<AGVProperties>();
            for (int i = 0; i < targets.Length; i++)
            {
                var name = targets[i].Trim();
                if (!string.IsNullOrEmpty(name)){
                    temp_que.Enqueue(new AGVProperties() { 
                     isLockedOnLeave=true,
                     isUnlockOnArrial=true,
                     StayTime=0,
                     Targetname=name
                    });

                }
            }
            NavTaskService.routes.TryAdd(appState.SelectedModel.name, temp_que);
            appState.SetModel(appState.SelectedModel, ActionType.NAVIGATE);
        }
        catch (Exception ex)
        {
            
            throw;
        }
     
      
      
      
    }

    public async Task CancelNav(){
        if (appState.SelectedModel == null) return;
         appState.SetModel(appState.SelectedModel, ActionType.CANCEL);
        InitUiComponets();
 
    }
   

}
