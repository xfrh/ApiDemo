@page "/points"
@using ApiDemoApp.Models
@using System.Text.Json
@using ApiDemoApp.Services
@using System.Text
@using System.Reflection
@inject AppState appState
@inject DataService dataService
@implements IDisposable;
    <MudTable Items="@lst"   Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" >
     
      <HeaderContent>
      @foreach (PropertyInfo p in typeof(TargetPointsModel).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy))
      {
         <MudTh>@p.Name</MudTh>
       }
     
    </HeaderContent>
        <RowTemplate>
        @foreach (PropertyInfo p in typeof(TargetPointsModel).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy))
            {
                if(p.GetValue(context).GetType() == typeof(System.String))
                {
                <MudTd> @p.GetValue(context)</MudTd>
                }
                else
                {
                   Coordinace _p = p.GetValue(context) as Coordinace;
                   string _f ="x:" + string.Format("{0:N2}%", _p.x) + " y:" + string.Format("{0:N2}%", _p.y) + " theta:" +  string.Format("{0:N2}%", _p.theta);
                  <MudTd>
                      <MudGrid>
                       <MudItem xs="6">
                         <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">@_f</MudPaper>
                        </MudItem>
                         <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                                <MudIconButton Icon="@Icons.Filled.Navigation" aria-label="navigate" Color="Color.Primary" OnClick="async ()=>{ await StartNav(_p);}"/>
                                </MudPaper>
                        </MudItem>
                      </MudGrid>
                  </MudTd>
               
                }
            }
            
</RowTemplate>
    
   </MudTable>



@code {
    RegisterAGVFrom model;
    private List<TargetPointsModel> lst = new List<TargetPointsModel>();
    private bool _loading;

    public async Task StartNav(Coordinace key)
    {

        var result = await dataService.StartNav(key);
        if (string.IsNullOrEmpty(result))
        {
            model = appState.SelectedModel;
            appState.SetModel(model, ActionType.NAVIGATE);
            await this.InvokeAsync(() => this.StateHasChanged());
        }
    }
    protected override async Task OnInitializedAsync()
    {
        // lst = await dataService.Target_Points();
        appState.OnChange += ReceiveData;
    }
    public void Dispose()
    {
        appState.OnChange -= ReceiveData;
    }

    public async void ReceiveData()
    {
        if (appState.SelectedModel != null) {
            if(appState.SelectedType == ActionType.SELECTED)
            {
               lst = await dataService.Target_Points();
               await this.InvokeAsync(() => this.StateHasChanged());
            }

        }


    }
}
