@page "/map"
@attribute [Authorize(Roles="Admin,User")]
@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using ApiDemoApp.Events
@using SixLabors.Fonts
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Drawing.Processing;
@inject AppState appState;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable;
  <MudPaper Height="400px" Width="100%" Elevation="0"  Class="pa-6 mt-16">
     <MudContainer MaxWidth="MaxWidth.Medium"  >
           <MudPaper Height="400px" Width="100%" Square="true" Elevation="0">
            <MudElement @bind-Ref="_mudImag" HtmlTag="input" Style="visibility:hidden" />
            <MudImage Src="@mapLayer.image_url" Alt="地图加载中..." Elevation="0" Class="rounded-lg" Width="@mapLayer.width" Height="@mapLayer.height"  />
         </MudPaper>
      
      
        <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudPaper Outlined="true" Class="px-4 py-1" Height="300px">
                    <EditForm Model="@aGVProperties" OnValidSubmit="OnValidSubmit">
                      <DataAnnotationsValidator />
                           <MudTextField Class="mt-3" @bind-Value="aGVProperties.Targetname" ReadOnly=true/>
                           <MudTextField Class="mt-3" @bind-Value="aGVProperties.StayTime" For="@(() => aGVProperties.StayTime)" Label="目标点停留时长(单位秒)" T="int" />
                           <MudCheckBox @bind-Checked="aGVProperties.isUnlockOnArrial" Label="到达后断电"></MudCheckBox>
                           <MudCheckBox @bind-Checked="aGVProperties.isLockedOnLeave" Label="离开后上电"></MudCheckBox>
                           <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">确认</MudButton>
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="ToggleOpen">取消</MudButton>
                </EditForm>
            </MudPaper>
        </MudPopover>
    </MudContainer>
</MudPaper>


@code {
    private  double LEFT_PADDING = 0;
    private  double TOP_PADDING = 0;
    [Inject] private IDialogService DialogService { get; set; }
    MapLayer mapLayer=new MapLayer();
    Dictionary<string, Coordinace> lst;
    ElementReference _mudImag = new ElementReference();
    Coordinace coordinace;
    public bool _isOpen;
    AGVProperties aGVProperties;
    List<AGVProperties> lst_properties;
    string agv_name;

    protected override async Task OnInitializedAsync()
    {
        mapLayer = await HttpService.Execute_Get("map");
        mapLayer.image_url = await MapService.ProcessMap(new AGVTaskModel() { url = appState.SelectedModel.url });
        InitProperties();
      //  await GetDimensions();
        appState.OnChange += ReceiveData;
        await InvokeAsync(StateHasChanged);
    }

    async void InitProperties(){
        lst = new Dictionary<string, Coordinace>();
        lst_properties = await localStorage.GetItemAsync<List<AGVProperties>>("target_properties");
        await LoadTargets();
        if (lst_properties == null)
            lst_properties = new List<AGVProperties>();
    }
    async Task LoadTargets(){

        List<TargetPointsModel> targetPointsModels = await HttpService.Execute_Get("android_target");
        foreach (var item in targetPointsModels)
        {
            var px = (item.coordinace.x - mapLayer.origin_x) * 20;
            var py = mapLayer.height - ((item.coordinace.y - mapLayer.origin_y) * 20);
            lst.TryAdd(item.name, new Coordinace() { x = px, y = py });
        }


    }

    async Task GetDimensions()
    {
        //  var dimension = await Service.GetDimensions(_mudImag);
        try
        {
            var result = await _mudImag.MudGetBoundingClientRectAsync();
            if(result!=null){
                LEFT_PADDING = result.AbsoluteLeft;
                TOP_PADDING = result.AbsoluteTop;
            }

        }
        catch (Exception)
        {


        }

    }




    public void Dispose()
    {
        appState.OnChange -= ReceiveData;

    }

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
        StateHasChanged();
    }

    private async void OnValidSubmit(EditContext context)
    {
        if (string.IsNullOrEmpty(aGVProperties.Targetname))
        {
            await DialogService.ShowMessageBox(
                 "警告",
                 "没有选择任务目标!",
                 yesText: "OK");
            return;
        }
        lst_properties.Add(aGVProperties);
        await localStorage.SetItemAsync<List<AGVProperties>>("target_properties", lst_properties);
        bool? result= await DialogService.ShowMessageBox(
                "提示",
                "目标属性保存完毕!",
                yesText: "OK");
        if(result!=null)
            ToggleOpen();

    }
    protected async void Mouse_Move(MouseEventArgs e)
    {
        foreach (var key in lst.Keys)
        {
            double tx = e.ClientX - LEFT_PADDING;
            double ty = e.ClientY - TOP_PADDING;
            if (Math.Abs(tx - lst[key].x) < 30 && Math.Abs(ty - lst[key].y) < 30)
            {
                aGVProperties = lst_properties.FirstOrDefault(v => v.Targetname == key);
                if (aGVProperties == null)
                {
                    aGVProperties = new AGVProperties()
                        {
                            Targetname = key,
                            StayTime = 0,
                            isLockedOnLeave = true,
                            isUnlockOnArrial = true
                        };
                }
                ToggleOpen();
            }

        }

    }


    public async void ReceiveData()
    {
        switch (appState.SelectedType)
        {
            case ActionType.SELECTED:
                mapLayer = await HttpService.Execute_Get("map");
                mapLayer.image_url = await MapService.ProcessMap(new AGVTaskModel() { url = appState.SelectedModel.url, DrawCoordinates = appState.SelectedModel.DrawCoordinates,TargetName=appState.SelectedModel.cur_target });
                InitProperties();
             //   await GetDimensions();
                await InvokeAsync(StateHasChanged);
                break;
            case ActionType.CANCEL:
            case ActionType.COMPLETE:
                mapLayer = await HttpService.Execute_Get("map");
                mapLayer.image_url = await MapService.ProcessMap(new AGVTaskModel() { url = appState.SelectedModel.url, DrawCoordinates = appState.SelectedModel.DrawCoordinates, TargetName = appState.SelectedModel.cur_target });
                await InvokeAsync(StateHasChanged);
                break;
            case ActionType.STOPPED:
                mapLayer.image_url = await MapService.ProcessMap(new AGVTaskModel() { url = appState.SelectedModel.url, DrawCoordinates = appState.SelectedModel.DrawCoordinates, TargetName = appState.SelectedModel.cur_target });
                await InvokeAsync(StateHasChanged);
                break;

        }


    }

 


  
}