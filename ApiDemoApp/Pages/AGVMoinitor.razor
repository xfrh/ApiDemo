@page "/scheduler"
@attribute [Authorize(Roles = "Admin,User")]
@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using ApiDemoApp.Events
@inject AppState appState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ISnackbar Snackbar
@implements IDisposable;
<MudPaper Class="pt-0 ma-1" Elevation="0">
    @*  <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.VerifiedUser" IconColor="Color.Inherit" Size="Size.Small" OnClick="@TestNext">test next</MudButton>*@
     <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="pt-0 ma-1 d-flex flex-wrap flex-grow-1">

        <ChildContent>
            <MudDropZone T="DropItem" Identifier="Drop Zone 1"  Class="rounded mud-background-gray pa-6 ma-8 flex-none">
                <MudText Typo="Typo.h6" Class="mb-4">观察区(拖拽地图到工作区开始导航)</MudText>

            </MudDropZone>
            <MudDropZone T="DropItem" Identifier="Drop Zone 2" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">工作区(拖拽地图回观察区取消导航)  @selectedname</MudText>
             </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            <MudImage Src="@context.image.Src" Width="@context.image.Width" Height="@context.image.Height" />
            <MudPaper Elevation="25" Class="pa-4 my-4">任务:@context.Name 启动时间:@context.StartTime</MudPaper>
        </ItemRenderer>
    </MudDropContainer>
</MudPaper>
@code {
    private int small_width = 204;
    private int small_height = 240;
    private List<DropItem> _items = new List<DropItem>();
    private MapLayer mapLayer = new MapLayer();
    private string selectedname;
    List<AGVTaskModel> lst;
    List<RegisterAGVFrom> agv_lst;
    List<Coordinace> draw_coordinces = new List<Coordinace>();
    bool btnDisabled = true;
    AGVTaskModel model;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EventBase.navigateTrigger += RegisterNavTrigger;
            appState.OnChange += ReceiveData;
            await InitDropZone();
        }
    }

    async Task InitDropZone(){
        agv_lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
        lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
        lst = lst.OrderBy(o => o.StartTime).ToList();
        _items.Clear();
        foreach (var item in lst)
        {
            if (!HttpService.myIps.ContainsKey(item.AGV_No))
                HttpService.myIps.TryAdd(item.AGV_No, item.url);
            mapLayer = await HttpService.Execute_Get("map", item.AGV_No);
            _items.Add(new DropItem()
                {
                    Name = item.Title,
                    StartTime = item.StartTime.ToString(),
                    Url = item.url,
                    image = new MudImage()
                    {
                        Src = mapLayer.image_url,
                        Width = small_width,
                        Height = small_height
                    },

                    Identifier = "Drop Zone 1"
                });
        }
        await InvokeAsync(StateHasChanged);
    }

    async void TestNext()
    {
        await HttpService.Execute_Post("next", null);
    }
    async void RegisterNavTrigger(object sender, EventArgs m)
    {
        model = (AGVTaskModel)m;
        var q = _items.FirstOrDefault(v => v.Name == model.Title);
        if (q != null) {
            if (NavTaskService.routes.ContainsKey(model.AGV_No)) return;
            if (q.Identifier != "Drop Zone 2")
            {
                var p = agv_lst.FirstOrDefault(v => v.name == model.AGV_No);
                if (p != null)
                {
                    appState.SelectedModel = p;
                    HttpService.Base_URL = p.url;
                }
                InitZoneTwo();
                q.Identifier = "Drop Zone 2";

                mapLayer = await HttpService.Execute_Get("map", model.AGV_No);
                q.image = new MudImage()
                    {
                        Src = await MapService.ProcessMap(model),
                        Width = mapLayer.width,
                        Height = mapLayer.height

                    };

                await InvokeAsync(StateHasChanged);
                PrepareNav(model);
            }
        }

    }

    public void Dispose()
    {
        appState.OnChange -= ReceiveData;
        EventBase.navigateTrigger -= RegisterNavTrigger;
    }

    public async void ReceiveData()
    {
        var q = _items.FirstOrDefault(v => v.Identifier == "Drop Zone 2");
        if(q==null) return;

        switch (appState.SelectedType)
        {
            case ActionType.STOPPED:
                q.image.Src = await MapService.ProcessMap(new AGVTaskModel() { DrawCoordinates = appState.SelectedModel.DrawCoordinates,TargetName=appState.SelectedModel.cur_target });
                await InvokeAsync(StateHasChanged);
                break;
            case ActionType.COMPLETE:
                await InitDropZone();
                break;


        }


    }

    void PrepareNav(AGVTaskModel model) {

        //if (NavTaskService.routes != null)
        //{
        //    if (NavTaskService.routes.ContainsKey(model.AGV_No))
        //        NavTaskService.routes.Remove(model.AGV_No);
        //}
        //appState.SelectedModel.DrawCoordinates = new List<Coordinace>();
        //NavTaskService.routes.TryAdd(model.AGV_No, model.routes);
        //appState.SetModel(appState.SelectedModel, ActionType.NAVIGATE);
        var p = agv_lst.FirstOrDefault(v => v.name == model.AGV_No);
        if (p != null)
        {
            appState.SelectedModel = p;
            appState.SelectedModel.DrawCoordinates = new List<Coordinace>();
            appState.SelectedModel.cur_target = "";
            HttpService.Base_URL = p.url;
            if (NavTaskService.routes.ContainsKey(model.AGV_No))
                NavTaskService.routes.Remove(model.AGV_No);
            NavTaskService.routes.TryAdd(model.AGV_No, model.routes);
            if (!HttpService.myIps.ContainsKey(model.AGV_No))
                HttpService.myIps.TryAdd(model.AGV_No, model.url);
            appState.SetModel(appState.SelectedModel, ActionType.NAVIGATE);
        }


    }

    private void InitZoneTwo() {
        var q = _items.FirstOrDefault(v => v.Identifier == "Drop Zone 2");
        if (q != null) {
            q.Identifier = "Drop Zone 1";
            q.image.Width = small_width;
            q.image.Height = small_height;
            StateHasChanged();
        }
    }

    private async void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {

        InitZoneTwo();
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        HttpService.Base_URL = dropItem.Item.Url;
        var q = lst.FirstOrDefault(v => v.Title == dropItem.Item.Name);
        if (q == null) return;
        mapLayer = await HttpService.Execute_Get("map", q.AGV_No);
        if (dropItem.Item.Identifier == "Drop Zone 2")
        {
              
                dropItem.Item.image.Src = mapLayer.image_url;
                dropItem.Item.image.Width = mapLayer.width;
                dropItem.Item.image.Height = mapLayer.height;
                btnDisabled = false;
                selectedname = dropItem.Item.Name;

                Queue<string> que = new Queue<string>();
                string[] targets = q.TargetName.Split(",");
                for (int i = 0; i < targets.Length; i++)
                {
                    var name = targets[i].Trim();
                    if (!string.IsNullOrEmpty(name))
                        que.Enqueue(name);
                }
                PrepareNav(new AGVTaskModel()
                {
                    AGV_No=q.AGV_No,
                    url=q.url,
                    routes=que
                });
         

        }
        else
        {
             
                dropItem.Item.image.Src = mapLayer.image_url;
                dropItem.Item.image.Width = small_width;
                dropItem.Item.image.Height = small_height;
                btnDisabled = true;
                selectedname = "";
                var pp = agv_lst.FirstOrDefault(v => v.name == q.AGV_No);
                appState.SelectedModel = pp;
                HttpService.Base_URL=pp.url;
                appState.SetModel(appState.SelectedModel, ActionType.CANCEL);
          
            }
            StateHasChanged();
        }



    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
        public string StartTime { get; set; }
        public string Url { get; set; }
        public MudImage image { get; set; }
     

    }
    
}
