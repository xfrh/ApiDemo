@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using Quartz
@using Quartz.Impl
@using System.Text.Json
@inject AppState appState
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable
<MudPaper Class="d-flex flex-row flex-grow-1 gap-1" Elevation="0">
    @if (appState.SelectedModel == null)
    {
        <MudTextField T="string"  Label="还未选择机器人" Variant="Variant.Text" Margin="Margin.Dense" Style="align-content:center;width:120px" ></MudTextField>
    }
    else
    {

        @if (lst != null && lst.Count > 0)
        {
            <MudTextField @bind-Value="cur_time" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.Timer" AdornmentColor="Color.Warning" ReadOnly=true Margin="Margin.Dense" Style="width:100px" />
         }
        <MudTextField @bind-Value="cur_Battery" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.BatteryChargingFull" AdornmentColor="Color.Info" ReadOnly=true Margin="Margin.Dense" Style="width:100px" />
        <MudTextField @bind-Value="cur_flag" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Speed" AdornmentColor="Color.Secondary" ReadOnly=true Margin="Margin.Dense" Style="width:120px" />
        if(aGVSpeed!=null && aGVSpeed.vx>0){
            <MudTextField @bind-Value="cur_speed" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.ShutterSpeed" AdornmentColor="Color.Error" ReadOnly=true Margin="Margin.Dense" Style="width:120px" />
        }
        else{
            <MudTextField @bind-Value="cur_btn"  Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.RadioButtonChecked" AdornmentColor="@btnColor" ReadOnly=true Margin="Margin.Dense" Style="width:120px" />
        }
      
        <MudTextField @bind-Value="agv_info" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Info" AdornmentColor="Color.Tertiary" ReadOnly=true Margin="Margin.Dense" Style="width:200px" />
    }

</MudPaper>
@code {
    string cur_time;
    string cur_Battery;
    string cur_flag;
    string cur_btn;
    string cur_speed;
    string agv_info;

    Color btnColor;
    MoveStatus moveStatus;
    Coordinace coordinace;
    AGVSpeed aGVSpeed;
    List<AGVTaskModel> lst;
    List<AGVProperties> lst_properties;
    protected override void OnInitialized()
    {
        appState.OnChange += ReceivedModel;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                lst_properties = await localStorage.GetItemAsync<List<AGVProperties>>("target_properties");
                lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
                var agv_lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
                if (agv_lst!=null && lst != null && lst.Count > 0)
                {
                    if (appState.SelectedModel == null)
                    {
                        foreach (var model in lst)
                        {
                            var url = agv_lst.FirstOrDefault(v => v.name == model.AGV_No).url;
                            await TimeJobService.AddToSchedule(model, url);
                        }

                    }
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {

                LogService.LogMessage("agvstatus afterrender " + ex.Message);
            }

        }

    }



    public void Dispose()
    {
        appState.OnChange -= ReceivedModel;

    }

    void ShowSanckBar(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add(message, Severity.Normal);
    }

    private async Task MyTask()
    {
        try
        {
            moveStatus = await HttpService.Execute_Get("movebase_status");
            coordinace = await HttpService.Execute_Get("pose");
            if (moveStatus.status == 1)
            {
                aGVSpeed = await HttpService.Execute_Get("speed");
                if (aGVSpeed.vx > 0)
                {
                    cur_speed = aGVSpeed.vx.ToString("0.0") + "/" + aGVSpeed.vth.ToString("0.0");
                }
                if (coordinace != null)
                    appState.SelectedModel.DrawCoordinates.Add(coordinace);
                if (appState.SelectedModel.DrawCoordinates.Count > 1)
                    appState.SetModel(appState.SelectedModel, ActionType.STOPPED);

            }
            else
            {
                aGVSpeed = new AGVSpeed();
            }


            StateHasChanged();
        }
        catch (Exception ex)
        {

            LogService.LogMessage("mytask" + ex.Message);
          
        }
      
    }


    async void Report_Progress()
    {
        while (moveStatus.status != 1)
        {
            await MyTask();
            if (moveStatus.status == 2) break;
            Thread.Sleep(1000);
        }
        while (moveStatus.status == 1)
        {
            await MyTask();
            if (moveStatus.status == 2) break;
            Thread.Sleep(1000);
        }
        if (moveStatus.status == 3)
            appState.SetModel(appState.SelectedModel, ActionType.COMPLETE);
    }



    public async void ReceivedModel()
    {
        if (appState.SelectedModel != null)
        {
            switch (appState.SelectedType)
            {
                case ActionType.SELECTED:
                    await MyTask();
                    StatuService.UpdateEvent += async agv =>
                    {
                        await InvokeAsync(() =>
                     {

                         cur_time = agv.timer.ToLongTimeString();
                         cur_Battery = " 电量:" + agv.battery.battery.ToString();
                         switch(agv.battery.chargeFlag){
                             case 2:
                                 cur_flag = "充电桩充电";
                                 break;
                             case 3:
                                 cur_flag="适配器充电";
                                 break;
                             case 8:
                                 cur_flag="对接充电桩";
                                 break;
                             default:
                                 cur_flag = "非充电";
                                 break;
                         }
                         if(agv.battery.emergencyButton==0){
                             cur_btn="急停按下";
                             btnColor = Color.Error;
                         }
                         else if(agv.battery.emergencyButton==1){
                             cur_btn = "急停弹起";
                             btnColor = Color.Success;
                         }
                         StateHasChanged();
                     });
                    };
                    agv_info = appState.SelectedModel.name + "," + appState.SelectedModel.type;
                    ShowSanckBar(appState.SelectedModel.name + "开始工作");
                    break;
                case ActionType.NAVIGATE:
                    {

                        string payload = JsonSerializer.Serialize(new TargetName() { point = appState.SelectedModel.cur_target });
                        await HttpService.Execute_Post("nav_point", payload);
                        if (lst_properties != null)
                        {
                            var q = lst_properties.FirstOrDefault(v => v.Targetname == appState.SelectedModel.cur_target);
                            if (q != null)
                            {
                                if (q.isLockedOnLeave)
                                    await HttpService.Execute_Post("lock", null);
                            }
                        }
                        Report_Progress();

                    }

                    break;
                case ActionType.RESUME:
                    await HttpService.Execute_Post("resume_nav", null);
                    ShowSanckBar("导航正在被恢复...");
                    Report_Progress();
                    break;
                case ActionType.CANCEL:
                    await HttpService.Execute_Post("cancel_goal", null);
                    ShowSanckBar("导航被取消");
                    break;
                case ActionType.PAUSE:
                    await HttpService.Execute_Post("cancel_goal", null);
                    ShowSanckBar("导航被暂停");
                    break;
                case ActionType.COMPLETE:
                    ShowSanckBar(appState.SelectedModel.cur_target + " 导航完成");
                    break;
                case ActionType.CHARGE:
                    Charge charge = new Charge()
                        {
                            type = 1,
                            point = "充电桩"
                        };
                    var stringPayload = JsonSerializer.Serialize(charge);
                    await HttpService.Execute_Post("charge", stringPayload);
                    ShowSanckBar("开始导航充电");
                    Report_Progress();
                    break;
                case ActionType.ADDTASK:
                    lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
                    await this.InvokeAsync(() => this.StateHasChanged());
                    break;
                case ActionType.MANUL:
                    {
                        string payload = JsonSerializer.Serialize(appState.SelectedModel.SelectedAGVSpeed);
                        await HttpService.Execute_Post("speed", payload);
                        Report_Progress();
                        if(appState.SelectedModel.SelectedAGVSpeed.vx==0 && appState.SelectedModel.SelectedAGVSpeed.vth==0)
                        {
                            ShowSanckBar("停止运行");
                        }
                        else{
                            ShowSanckBar("开始移动小车");
                        }
                      

                    }
                 
                    break;

            }
        }

    }
}
