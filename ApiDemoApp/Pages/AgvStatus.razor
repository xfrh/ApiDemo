@using ApiDemoApp.Models
@using ApiDemoApp.Services
@using Quartz
@using Quartz.Impl
@using System.Text.Json
@inject AppState appState
@inject DataService dataService
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ISchedulerFactory _iSchedulerFactory
@implements IDisposable
     <MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0">
     @if(appState.SelectedModel== null){
        <MudText Typo="Typo.subtitle2">还未选择机器人</MudText>
    }
    else{
        @if(lst!=null && lst.Count>0){
            <MudTooltip Text=@cur_time>
            <MudAvatar Color="Color.Surface" Variant="Variant.Filled">
                <MudIcon Color="Color.Dark" Icon="@Icons.Outlined.Timer" Size="Size.Small" />
            </MudAvatar>
           </MudTooltip>
          
         }

        <MudTooltip Text=@cur_Battery>
          <MudAvatar Color="Color.Success" Variant="Variant.Filled">
                <MudIcon Color="Color.Dark" Icon="@Icons.Filled.BatteryAlert" Size="Size.Small" />
                </MudAvatar>
        </MudTooltip>
        <MudTooltip Text=@cur_Speed>
            <MudAvatar Color="Color.Secondary" Variant="Variant.Filled">
                <MudIcon Color="Color.Dark" Icon="@Icons.Filled.Speed" Size="Size.Small" />
        </MudAvatar>
       </MudTooltip>
        <MudTooltip Text=@cur_Position>
            <MudAvatar Color="Color.Info" Variant="Variant.Filled">
                <MudIcon Color="Color.Dark" Icon="@Icons.Filled.LocationOn" Size="Size.Small" />
        </MudAvatar>
       </MudTooltip>

          <MudTooltip Text=@model.type>
            <MudAvatar Color="Color.Tertiary" Variant="Variant.Filled">
                <MudIcon Color="Color.Dark" Icon="@Icons.Filled.Info" Size="Size.Small" />
            </MudAvatar>
        </MudTooltip>
         
         
     }

  
  
     </MudPaper>

@code {
    RegisterAGVFrom model;
    Battery battery;
    MoveStatus moveStatus;
    Coordinace coordinace;
    AGVSpeed aGVSpeed;
    string cur_Position;
    string cur_Battery;
    string cur_Speed;
    string cur_time;
    List<AGVTaskModel> lst;
    protected override void OnInitialized()
    {
        model = appState.SelectedModel;
        cur_time = DateTime.Now.ToString("HH:mm");
        appState.OnChange += ReceivedModel;
        if (model != null)
            MyTask();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
            var agv_lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
            if(lst!=null && lst.Count>0){
                if(appState.SelectedModel==null)
                {
                    foreach (var model in lst){
                        var url = agv_lst.FirstOrDefault(v => v.name == model.AGV_No).url;
                        await AddToSchedule(model,url);
                    }

                }
            }
            StateHasChanged();
        }

    }

    private async Task AddToSchedule(AGVTaskModel model,string url)
    {
        try
        {
            dataService.Base_URL ="http://" + url;
            Coordinace start_point = await dataService.Cur_Position();
            var scheduler = await _iSchedulerFactory.GetScheduler();
            IJobDetail job = JobBuilder.Create<ScheduleJobService>()
           .WithIdentity(model.Title, model.AGV_No)
           .UsingJobData("url",url)
           .UsingJobData("target", model.TargetName)
           .UsingJobData("after", model.AfterTask ? null : JsonSerializer.Serialize(start_point))
           .Build();

            var triggerKey = new TriggerKey(model.Title);
            string schedulModel = EditShowList(model);
            // Trigger the job to run now, and then repeat every 10 seconds
            ITrigger trigger = TriggerBuilder.Create()
                .WithIdentity(triggerKey)
                .StartNow()
                 //.WithSimpleSchedule(x => x
                 //        .WithIntervalInSeconds(10)
                 //        .RepeatForever())
                 .WithCronSchedule(schedulModel) //every Wednesday at 12:00 pm "0 0 12 ? * WED"

                .Build();
            await scheduler.Start();
            // Tell quartz to schedule the job using our trigger
            await scheduler.ScheduleJob(job, trigger);
        }
        catch (Exception ex)
        {

            LogService.LogMessage(ex.Message);
        }


    }

    private string EditShowList(AGVTaskModel _model)
    {

        string schedulModel = "0 " + _model.StartTime.Value.Minutes + " " + _model.StartTime.Value.Hours + " ? * ";
        foreach (var p in _model.WeekOptions)
        {
            switch (p)
            {
                case "周一":
                    schedulModel += "MON,";
                    break;
                case "周二":
                    schedulModel += "TUE,";
                    break;
                case "周三":
                    schedulModel += "WED,";
                    break;
                case "周四":
                    schedulModel += "THU,";
                    break;
                case "周五":
                    schedulModel += "FRI,";
                    break;
                case "周六":
                    schedulModel += "SAT,";
                    break;
                case "周日":
                    schedulModel += "SUN,";
                    break;

            }
        }

        schedulModel = schedulModel.TrimEnd(',');

        return schedulModel;

    }

    public void Dispose()
    {
        appState.OnChange -= ReceivedModel;

    }

    void ShowSanckBar(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add(message, Severity.Normal);
    }

    private async Task MyTask()
    {
        model = appState.SelectedModel;
        moveStatus = await dataService.Cur_Status();
        coordinace = await dataService.Cur_Position();
        battery = await dataService.Battery_Status();
        aGVSpeed = await dataService.Speed();

        if(coordinace!=null)
            cur_Position =  "位置坐标: "  + string.Format("{0:N2}", coordinace.x) + " " + string.Format("{0:N2}", coordinace.y) +  " " + string.Format("{0:N2}", coordinace.theta);
        if (battery != null){
            cur_Battery = "电量:" + battery.battery.ToString() + "%,";
            switch(battery.chargeFlag){
                case 2:
                    cur_Battery += "正在充电桩充电";
                    break;
                case 3:
                    cur_Battery += "适配器充电";
                    break;
                case 8:
                    cur_Battery += "正在对接充电桩";
                    break;
                default:
                    cur_Battery += "非充电";
                    break;
            }
            switch(battery.emergencyButton){
                case 0:
                    cur_Battery += ",急停开关按下";
                    break;
                case 1:
                    cur_Battery +=",急停开关谈起";
                    break;
            }

        }
        if(aGVSpeed!=null){
            cur_Speed = "线速度:" + aGVSpeed.vx.ToString() + ",角速度:" + aGVSpeed.vth;
        }


        await this.InvokeAsync(() => this.StateHasChanged());

    }

    public bool isBatteryInCharge(){
        return battery.chargeFlag == 2;
    }

    public bool isStopBtnPressed(){
        return battery.emergencyButton == 0;
    }

    public bool isNavigate(){
        return moveStatus.status == 1;
    }

    public async void ReceivedModel()
    {
        if (appState.SelectedModel != null)
        {
            switch (appState.SelectedType)
            {
                case ActionType.SELECTED:
                    ShowSanckBar(appState.SelectedModel.name + "开始工作");
                    await MyTask();
                    await this.InvokeAsync(() => this.StateHasChanged());
                    break;
                case ActionType.NAVIGATE:
                    await MyTask();
                    //if(isBatteryInCharge()){

                    //    ShowSanckBar("正在充电中");
                    //    return;
                    //}
                    if(isStopBtnPressed()){
                        ShowSanckBar("急停开关打开了");
                        return;
                    }
                    await dataService.StartNav(appState.Nav_Coordiance);
                    ShowSanckBar("导航开始");
                    appState.DrawCoordinates.Clear();
                    while(moveStatus.status!=1)
                        await MyTask();
                    while (moveStatus.status == 1)
                    {
                        appState.DrawCoordinates.Add(coordinace);
                        await MyTask();
                        if (moveStatus.status != 1)
                        {
                            if (moveStatus.status == 3){
                                ShowSanckBar("导航完成");
                                appState.SetModel(model, ActionType.COMPLETE);
                            }
                            else if (moveStatus.status == 2){
                                ShowSanckBar("导航被取消");
                                appState.SetModel(model, ActionType.CANCEL);
                            }

                            break;
                        }

                        appState.SetModel(model, ActionType.STOPPED);
                        await this.InvokeAsync(() => this.StateHasChanged());

                        Thread.Sleep(1000);
                    }


                    break;
                case ActionType.CANCEL:
                    await dataService.CancelNav();
                    ShowSanckBar("导航被取消");
                 
                    break;


                case ActionType.CHARGE:
                    await MyTask();
                    if (isStopBtnPressed())
                    {
                        ShowSanckBar("急停开关打开了");
                        return;
                    }
                    await dataService.NavCharge();
                    ShowSanckBar("正在去充电");
                    appState.DrawCoordinates.Clear();
                    while(battery.chargeFlag!=2){
                        appState.DrawCoordinates.Add(coordinace);
                        await MyTask();
                        if(battery.chargeFlag==8){
                            ShowSanckBar("正在对接充电桩");
                        }
                        else if(battery.chargeFlag==2){
                            ShowSanckBar("开始充电");
                        }
                        if(moveStatus.status==1){
                            appState.SetModel(model, ActionType.STOPPED);
                            await this.InvokeAsync(() => this.StateHasChanged());

                        }
                        else if (moveStatus.status == 4)
                        {
                            ShowSanckBar("充电被取消");
                            break;
                        }

                        Thread.Sleep(1000);

                    }
                    break;
                case ActionType.MANUL:
                    await MyTask();
                    //if (isBatteryInCharge())
                    //{

                    //    ShowSanckBar("正在充电中");
                    //    return;
                    //}
                    if (isStopBtnPressed())
                    {
                        ShowSanckBar("急停开关打开了");
                        return;
                    }
                    await dataService.ManuMoveCar(appState.SelectedAGVSpeed);
                    appState.DrawCoordinates.Add(coordinace);
                    if(appState.DrawCoordinates.Count>=2){
                        appState.SetModel(model, ActionType.STOPPED);
                        await this.InvokeAsync(() => this.StateHasChanged());
                    }
                    break;

                case ActionType.ADDTASK:
                    lst = await localStorage.GetItemAsync<List<AGVTaskModel>>("agv_task");
                    await this.InvokeAsync(() => this.StateHasChanged());
                    break;


            }
        }
    }
}
