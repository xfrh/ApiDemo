@page "/login"
@using ApiDemoApp.Models
@using ApiDemoApp.Repositories
@using ApiDemoApp.Services
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authState 
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@*<h3>Login to system</h3>

<p>
    <label for="user">user:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</label>
    <input name="user" type="email" @bind-value="@email" required placeholder="enter the registed email" />
</p>

<p>
    <label for="password">password:</label>
    <input name="password" type="password" @bind-value="@password" required placeholder="enter the password"/>
</p>
<p>
    <input type="button" value ="提交" @onclick="LogintoSystem" />
</p> *@

<MudPaper Height="400px" Width="100%" Elevation="0"  Class="pa-4 mt-16">
     <MudContainer MaxWidth="MaxWidth.Medium" Elevation="0">
        <MudPaper Height="400px" Width="100%" Square="true" Elevation="0" >
           <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudCard  Class="pa-16 ma-2">
            <MudCardContent>
         
                <MudTextField Label="用户名" HelperText="输入注册的邮箱" Class="mt-3"
                              @bind-Value="model.EmailAddress" For="@(() => model.EmailAddress)" Variant="Variant.Outlined"/>
              
                
                <MudTextField Label="密码" HelperText="输入密码" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" Variant="Variant.Outlined"/>
              
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">登录</MudButton>
            </MudCardActions>
        </MudCard>

</EditForm>
        </MudPaper>
    </MudContainer>
</MudPaper>






@code {

    User model = new User();
    bool success;


    private System.Security.Claims.ClaimsPrincipal user;

    public async void OnValidSubmit(EditContext context )
    {

        // var _user = UserRepository.Users.SingleOrDefault(u => u.EmailAddress == model.EmailAddress && u.Password == model.Password);
        List<User> lst = await localStorage.GetItemAsync<List<User>>("user_table");
        var _user = lst.SingleOrDefault(u => u.EmailAddress == model.EmailAddress && u.Password == model.Password);
        if (_user != null)
        {
           await localStorage.SetItemAsync<User>("login_user", _user);
           _navigationManager.NavigateTo("/",true);
        }
          
        
    }
}
