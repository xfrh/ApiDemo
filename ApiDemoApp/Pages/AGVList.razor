
@using ApiDemoApp.Models
@using ApiDemoApp.Services
@inject AppState appState

@inject NavigationManager _navigationManager
@implements IDisposable;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<MudPaper Class="pa-4 mr-16" Elevation="0">

    <MudList Clickable=true  >
        @foreach(var model in lst)
        {
            <MudListItem Avatar="@Icons.Material.Filled.Image" Value=@model.url Text=@model.name Tag=@model.type OnClick="()=>ItemSelected(model)" />
        }
  </MudList>
</MudPaper>

@code {
    List<RegisterAGVFrom> lst =new List<RegisterAGVFrom>();


    protected override void OnInitialized()
    {
        appState.OnChange += ReceiveData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            lst = await localStorage.GetItemAsync<List<RegisterAGVFrom>>("agv_table");
            if (lst == null)
                lst = new List<RegisterAGVFrom>();
            StateHasChanged();

        }

    }


    public void Dispose()
    {
        appState.OnChange -= ReceiveData;
    }

    public async void ReceiveData()
    {
        if (appState.SelectedModel != null) {
            if (appState.SelectedType == ActionType.ADD)
            {
                lst.Add(appState.SelectedModel);
                appState.SelectedModel = null;
                StateHasChanged();
            }
            else if (appState.SelectedType == ActionType.DELETE)
            {
                var q = lst.FirstOrDefault(v => v.name == appState.SelectedModel.name);
                if (q != null)
                    lst.Remove(q);
                StateHasChanged();
            }
          

        }


    }

    async void ItemSelected(RegisterAGVFrom _model)
    {
        HttpService.Base_URL = "http://" + _model.url;
        _model.DrawCoordinates = new List<Coordinace>();
        _model.routes = new Queue<string>();
        appState.SetModel(_model, ActionType.SELECTED);
        _navigationManager.NavigateTo("/map");
    }


    //private async void OnSelectedItemChanged(MudListItem item)
    //{
    //    _selectedItem = item;
    //    RegisterAGVFrom _model =new RegisterAGVFrom();
    //    _model.name = _selectedItem.Text;
    //    _model.url = _selectedItem.Value.ToString();
    //    _model.type = _selectedItem.Tag.ToString();
    //    _model.DrawCoordinates = new List<Coordinace>();
    //    _model.SelectedAGVSpeed = new AGVSpeed();
    //    _model.routes = new Queue<string>();

        
       

    //}

}
